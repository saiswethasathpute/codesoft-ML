#codesoftML
#task-2
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
from imblearn.over_sampling import SMOTE  # For handling class imbalance


data = pd.read_csv('creditcard.csv')  # Ensure you have the correct file path


print("Missing values per column:")
print(data.isnull().sum())


X = data.drop(columns=['Class', 'Time'])  # 'Time' may not be useful
y = data['Class']  # Target variable (fraudulent or legitimate)


smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)


scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_resampled)


X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_resampled, test_size=0.2, random_state=42)


log_reg = LogisticRegression(max_iter=1000)
log_reg.fit(X_train, y_train)
y_pred_log_reg = log_reg.predict(X_test)


decision_tree = DecisionTreeClassifier(random_state=42)
decision_tree.fit(X_train, y_train)
y_pred_tree = decision_tree.predict(X_test)


random_forest = RandomForestClassifier(random_state=42)
random_forest.fit(X_train, y_train)
y_pred_forest = random_forest.predict(X_test)




print("Logistic Regression Classification Report:\n", classification_report(y_test, y_pred_log_reg))
print("Logistic Regression ROC-AUC:", roc_auc_score(y_test, y_pred_log_reg))


print("Decision Tree Classification Report:\n", classification_report(y_test, y_pred_tree))
print("Decision Tree ROC-AUC:", roc_auc_score(y_test, y_pred_tree))


print("Random Forest Classification Report:\n", classification_report(y_test, y_pred_forest))
print("Random Forest ROC-AUC:", roc_auc_score(y_test, y_pred_forest))


